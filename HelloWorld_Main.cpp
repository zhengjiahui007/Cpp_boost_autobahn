#if 1
#include<stdio.h>
#include<memory>
#include<iostream>
#include<vector>
#include<chrono>
#include<functional>
#include<iostream>
#include<string>
#include<tuple>
#include<boost\asio.hpp>
#include<boost\autobahn\autobahn.hpp>
#endif
#include "parameters.hpp"
#include<boost\version.hpp>


using namespace std;


void handler1(const boost::system::error_code& ec)
{
   std::cout << "5 s." << std::endl;
}

void handler2(const boost::system::error_code& ec)
{
	std::cout << "10 s." << std::endl;
}


int main(int argc, char** argv)
{
#if 1
	auto k = 3445;
	auto k_str = std::make_shared<int>(9);
	std::shared_ptr<int> p3 = std::make_shared<int>(10);
	boost::asio::io_service io_service;


	std::cout << "Hello World !" << endl;
	std::cout << "k = " << k << endl;
	std::cout << "k_str = " << k_str << endl;
	std::cout << "*k_str = " << *k_str << endl;
	cout << "p3 = " << p3 << endl;
	cout << "*p3 = " << *p3 << endl;

#if 1
	boost::asio::deadline_timer timer1(io_service, boost::posix_time::seconds(5));
	timer1.async_wait(handler1);
	boost::asio::deadline_timer timer2(io_service, boost::posix_time::seconds(10));
	timer2.async_wait(handler2);
	io_service.run();
#endif

	vector <int> test_v(10, 0);
	

	for (int k = 0; k < 10; k++)
	{
		test_v.push_back(k);

	}

	vector <int>::iterator it_test_v = test_v.begin();
	while (test_v.end() != it_test_v)
	{
		cout << *it_test_v++ << endl;

	}
#endif

#if 1
    std::cerr << "Boost: " << BOOST_VERSION << std::endl;

    try {
        auto parameters = get_parameters(argc, argv);

          boost::asio::io_service io;
          bool debug = parameters->debug();

        auto transport = std::make_shared<autobahn::wamp_tcp_transport>(
            io, parameters->rawsocket_endpoint(), debug);

        // create a WAMP session that talks WAMP-RawSocket over TCP
        //
        auto session = std::make_shared<autobahn::wamp_session>(io, debug);

        transport->attach(std::static_pointer_cast<autobahn::wamp_transport_handler>(session));

        // Make sure the continuation futures we use do not run out of scope prematurely.
        // Since we are only using one thread here this can cause the io service to block
        // as a future generated by a continuation will block waiting for its promise to be
        // fulfilled when it goes out of scope. This would prevent the session from receiving
        // responses from the router.
        boost::future<void> connect_future;
        boost::future<void> start_future;
        boost::future<void> join_future;
        boost::future<void> leave_future;
        boost::future<void> stop_future;

        connect_future = transport->connect().then([&](boost::future<void> connected) {
            try {
                connected.get();
            }
            catch (const std::exception& e) {
                std::cerr << e.what() << std::endl;
                io.stop();
                return;
            }

            std::cerr << "transport connected" << std::endl;

            start_future = session->start().then([&](boost::future<void> started) {
                try {
                    started.get();
                }
                catch (const std::exception& e) {
                    std::cerr << e.what() << std::endl;
                    io.stop();
                    return;
                }

                std::cerr << "session started" << std::endl;

                join_future = session->join(parameters->realm()).then([&](boost::future<uint64_t> joined) {
                    try {
                        std::cerr << "joined realm: " << joined.get() << std::endl;
                    }
                    catch (const std::exception& e) {
                        std::cerr << e.what() << std::endl;
                        io.stop();
                        return;
                    }

                    std::tuple<std::string> arguments(std::string("hello"));
                    session->publish("com.examples.subscriptions.topic1", arguments);
                    std::cerr << "event published" << std::endl;

                    leave_future = session->leave().then([&](boost::future<std::string> reason) {
                        try {
                            std::cerr << "left session (" << reason.get() << ")" << std::endl;
                        }
                        catch (const std::exception& e) {
                            std::cerr << "failed to leave session: " << e.what() << std::endl;
                            io.stop();
                            return;
                        }

                        stop_future = session->stop().then([&](boost::future<void> stopped) {
                            std::cerr << "stopped session" << std::endl;
                            io.stop();
                            });
                        });
                    });
                });
            });

        std::cerr << "starting io service" << std::endl;
        io.run();
        std::cerr << "stopped io service" << std::endl;

        transport->detach();
    }
    catch (const std::exception& e) {
        std::cerr << "exception: " << e.what() << std::endl;
        return 1;
    }
    return 0;
#endif


	return 0;
}
